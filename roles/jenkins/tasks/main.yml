---

- name: check if java is installed
  stat:
    path: /usr/bin/java
  register: javaexe

- name: install openjdk if java isn't found
  apt:
    name:  default-jdk
    state: latest
  when: not javaexe.stat.exists

- name: "add repo key"
  apt_key:
    url: "{{ jenkins_repo_key }}"
    state: present

- name: "add jenkins repo"
  apt_repository:
    filename: jenkins
    repo: "{{ jenkins_repo }}"
    update_cache: yes
    state: present

- name: "install jenkins"
  apt:
    name: "{{ jenkins_pkgs }}"
    state: latest
    update_cache: yes
    cache_valid_time: 3600
  register: jinstall

- name: stop and jenkins
  systemd:
    name: jenkins
    state: stopped
  when: jinstall is changed

- name: check if /var/lib/jenkins/init.groovy.d/ exists
  stat:
    path: /var/lib/jenkins/init.groovy.d/
  register: groovyd

- name: create /var/lib/jenkins/init.groovy.d/
  file:
    path: /var/lib/jenkins/init.groovy.d/
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755
  when: not groovyd.stat.exists

- name: deploy configs
  copy: 
    src: jenkins
    dest: /etc/default/jenkins
    owner: root
    group: root
    mode: 0644

- name: create jeninks admin user.
  template:
    src: create_admin_user.j2
    dest: /var/lib/jenkins/init.groovy.d/setup-admin.groovy
    owner: jenkins
    group: jenkins

- name: start and enable jenkins
  systemd:
    name: jenkins
    state: started
    enabled: yes

- name: Install plugins without a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
    url_username: "{{ jenkins_admin_username | default(omit) }}"
    url_password: "{{ jenkins_admin_password | default(omit)}}"
    url: "{{ jenkins_admin_url | default(omit) }}"
  register: my_jenkins_plugin_unversioned
  when: >
    'version' not in item.value
  loop: "{{ jenkins_plugins |dict2items }}"

- name: Install plugins with a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
    version: "{{ item.value['version'] }}"
    url_username: "{{ jenkins_admin_username | default(omit) }}"
    url_password: "{{ jenkins_admin_password | default(omit)}}"
    url: "{{ jenkins_admin_url | default(omit) }}"
  register: my_jenkins_plugin_versioned
  when: >
    'version' in item.value
  loop: "{{ jenkins_plugins |dict2items }}"

- name: Initiate the fact
  set_fact:
    jenkins_restart_required: no

- name: Check if restart is required by any of the versioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  loop: "{{ my_jenkins_plugin_versioned.results |flatten(levels=1) }}"

- name: Check if restart is required by any of the unversioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  loop: "{{ my_jenkins_plugin_unversioned.results |flatten(levels=1) }}"

- name: Restart Jenkins if required
  service:
    name: jenkins
    state: restarted
  when: jenkins_restart_required

- name: Wait for Jenkins to start up
  uri:
    url: "{{ jenkins_admin_url | default('http://localhost:8080') }}"
    status_code: 200
    timeout: 5
  register: jenkins_service_status
      # Keep trying for 5 mins in 5 sec intervals
  retries: 60
  delay: 5
  until: >
    'status' in jenkins_service_status and
     jenkins_service_status['status'] == 200
  when: jenkins_restart_required

- name: Reset the fact
  set_fact:
    jenkins_restart_required: no
  when: jenkins_restart_required

- name: Plugin pinning
  jenkins_plugin:
    name: "{{ item.key }}"
    state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
    url_username: "{{ jenkins_admin_username | default(omit) }}"
    url_password: "{{ jenkins_admin_password | default(omit)}}"
    url: "{{ jenkins_admin_url | default(omit) }}"
  when: >
      'pinned' in item.value
  loop: "{{ jenkins_plugins |dict2items }}"

- name: Plugin enabling
  jenkins_plugin:
    name: "{{ item.key }}"
    state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
    url_username: "{{ jenkins_admin_username | default(omit) }}"
    url_password: "{{ jenkins_admin_password | default(omit)}}"
    url: "{{ jenkins_admin_url | default(omit) }}"
  when: >
    'enabled' in item.value
  loop: "{{ jenkins_plugins |dict2items }}"